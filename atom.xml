<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lx`Blog</title>
  
  <subtitle>水边的哲学是不舍昼夜，山地的哲学是不知日月</subtitle>
  <link href="https://amoit.top/atom.xml" rel="self"/>
  
  <link href="https://amoit.top/"/>
  <updated>2024-04-07T14:49:52.798Z</updated>
  <id>https://amoit.top/</id>
  
  <author>
    <name>lx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>毕业论文</title>
    <link href="https://amoit.top/posts/2596fd41.html"/>
    <id>https://amoit.top/posts/2596fd41.html</id>
    <published>2024-04-07T22:47:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="毕业论文"><a href="#毕业论文" class="headerlink" title="毕业论文"></a>毕业论文</h1><h2 id="AI改论文"><a href="#AI改论文" class="headerlink" title="AI改论文"></a>AI改论文</h2><p>AI论文网站<br>chatgpt写论文指令全集</p><h3 id="论文网站-2024-4-6更新"><a href="#论文网站-2024-4-6更新" class="headerlink" title="论文网站 2024.4.6更新"></a>论文网站 2024.4.6更新</h3><pre><code>论文全生成网站:https://gpt.chachongz.com/半手动:https://yiyan.baidu.com/https://tiangong.kunlun.com</code></pre><h3 id="论文写"><a href="#论文写" class="headerlink" title="论文写"></a>论文写</h3><h4 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h4><p>根据论文题目“<strong>*”的第</strong>章文献综述每一节展开详细描述2千字</p><h3 id="中文润色"><a href="#中文润色" class="headerlink" title="中文润色"></a>中文润色</h3><h3 id="英文润色"><a href="#英文润色" class="headerlink" title="英文润色"></a>英文润色</h3><h3 id="提升论文质量"><a href="#提升论文质量" class="headerlink" title="提升论文质量"></a>提升论文质量</h3><h4 id="国内外研究现状"><a href="#国内外研究现状" class="headerlink" title="国内外研究现状"></a>国内外研究现状</h4><p>1.筛选相应文章<br>知网-关键字搜索-相关度搜索-勾选文献-导出文献（查新格式）- doc导出<br>2.使用文心一言工具<br>选择阅览文件功能-话术提问-现在你是一个很有经验的博士，我给你发了一些参考文献列表，你要根据文档的文献写一下国内和国外研究现状（文献综述），首先要把相似研究方向的文献归为一类，先总结研究方向的内容，然后介绍这个方向涉及的文献作者姓名、发表年份时间、当时的方法或观点、主要发现贡献和不足这些内容。比如多篇论文研究方向类似就可以归为一类，这个研究方向下面的文献就可以按发表时间顺序排序依次描述。最后根据当前研究的空缺方向写一下未来的研究方向。你的回答要包括文档的所有文献，总字5千字以上</p><h3 id="格式修改问题"><a href="#格式修改问题" class="headerlink" title="格式修改问题"></a>格式修改问题</h3><p>1.目录修改<br>将文章一级标题，二级标题设定好-引用-更新全部目录（注意:不要只改页面码容易出现错误）<br>2.尾注<br>引用-插入尾注</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;毕业论文&quot;&gt;&lt;a href=&quot;#毕业论文&quot; class=&quot;headerlink&quot; title=&quot;毕业论文&quot;&gt;&lt;/a&gt;毕业论文&lt;/h1&gt;&lt;h2 id=&quot;AI改论文&quot;&gt;&lt;a href=&quot;#AI改论文&quot; class=&quot;headerlink&quot; title=&quot;AI改论文&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://amoit.top/posts/0.html"/>
    <id>https://amoit.top/posts/0.html</id>
    <published>2024-04-07T14:49:52.798Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<p>矢量图以及图片的推荐网站<br>1.阿里巴巴矢量库<br>2.flastion 【强推】<br><a href="https://www.flaticon.com/">https://www.flaticon.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;矢量图以及图片的推荐网站&lt;br&gt;1.阿里巴巴矢量库&lt;br&gt;2.flastion 【强推】&lt;br&gt;&lt;a href=&quot;https://www.flaticon.com/&quot;&gt;https://www.flaticon.com/&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Github回滚代码</title>
    <link href="https://amoit.top/posts/2297fd4d.html"/>
    <id>https://amoit.top/posts/2297fd4d.html</id>
    <published>2024-01-09T20:59:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="butterfly主题更新修改"><a href="#butterfly主题更新修改" class="headerlink" title="butterfly主题更新修改"></a>butterfly主题更新修改</h2><h3 id="1-搜索界面修改"><a href="#1-搜索界面修改" class="headerlink" title="1.搜索界面修改"></a>1.搜索界面修改</h3><blockquote><ol><li>Algolia</li><li>本地搜索</li><li>DocSearch【推荐】<br>(1)_config.butterfly.yml中修改<br>(2)  在其中加入<pre><code>docsearch:enable: falseappId:apiKey:indexName:option:</code></pre>(3)</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;butterfly主题更新修改&quot;&gt;&lt;a href=&quot;#butterfly主题更新修改&quot; class=&quot;headerlink&quot; title=&quot;butterfly主题更新修改&quot;&gt;&lt;/a&gt;butterfly主题更新修改&lt;/h2&gt;&lt;h3 id=&quot;1-搜索界面修改&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue框架学习</title>
    <link href="https://amoit.top/posts/2289fd47.html"/>
    <id>https://amoit.top/posts/2289fd47.html</id>
    <published>2024-01-05T16:09:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue框架学习"><a href="#Vue框架学习" class="headerlink" title="Vue框架学习"></a>Vue框架学习</h2><p>渐进式JavaScript框架<br>vue是一个框架，也是一个生态。<br>官方文档：<br><a href="https://cn.vuejs.org">地址</a></p><pre><code>window版本:yarn 与npmnpm i yarn //下到本磁盘中npm i - global yarn //下载到全局yarn add **</code></pre><h3 id="Vue和react对比"><a href="#Vue和react对比" class="headerlink" title="Vue和react对比"></a>Vue和react对比</h3><h3 id="使用vue的不同方式："><a href="#使用vue的不同方式：" class="headerlink" title="使用vue的不同方式："></a>使用vue的不同方式：</h3><p>1.无须构建步骤，渐进式增强静态的HTML<br>2.在任何页面中作为Web Components 嵌入<br>3.单页应用 SPA<br>4.全栈/服务器渲染 SSR<br>5.Jamstrack /静态站点生成 SSG<br>6.开发桌面端、移动端、webGL，甚至是命令行终端中的界面</p><h3 id="vue-API：选项式API和组合式API"><a href="#vue-API：选项式API和组合式API" class="headerlink" title="vue API：选项式API和组合式API"></a>vue API：选项式API和组合式API</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue框架学习&quot;&gt;&lt;a href=&quot;#Vue框架学习&quot; class=&quot;headerlink&quot; title=&quot;Vue框架学习&quot;&gt;&lt;/a&gt;Vue框架学习&lt;/h2&gt;&lt;p&gt;渐进式JavaScript框架&lt;br&gt;vue是一个框架，也是一个生态。&lt;br&gt;官方文档：&lt;br&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue框架学习</title>
    <link href="https://amoit.top/posts/2289fd47.html"/>
    <id>https://amoit.top/posts/2289fd47.html</id>
    <published>2024-01-05T16:09:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react学习笔记"><a href="#react学习笔记" class="headerlink" title="react学习笔记"></a>react学习笔记</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react学习笔记&quot;&gt;&lt;a href=&quot;#react学习笔记&quot; class=&quot;headerlink&quot; title=&quot;react学习笔记&quot;&gt;&lt;/a&gt;react学习笔记&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>windows10 搭建gitlab服务器</title>
    <link href="https://amoit.top/posts/2297fd45.html"/>
    <id>https://amoit.top/posts/2297fd45.html</id>
    <published>2024-01-04T19:37:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p><h2 id="Clash-for-windows"><a href="#Clash-for-windows" class="headerlink" title="Clash for windows"></a>Clash for windows</h2><h3 id="配置：windows10"><a href="#配置：windows10" class="headerlink" title="配置：windows10"></a>配置：windows10</h3><h3 id="方法一-暂时未成功-docker无法在非专业版windows10进行配置没找到虚拟机接口"><a href="#方法一-暂时未成功-docker无法在非专业版windows10进行配置没找到虚拟机接口" class="headerlink" title="方法一 暂时未成功 docker无法在非专业版windows10进行配置没找到虚拟机接口"></a>方法一 暂时未成功 docker无法在非专业版windows10进行配置没找到虚拟机接口</h3><p>在家庭版安装Hyper-v虚拟机<br>参考文献：<br>Hyper-V是Windows系统自带的虚拟机软件，其主要功能是在不影响原系统的情况下创建多个Windows或非Windows子系统。</p><p>请注意：Hyper-V 仅在 Windows 10 专业版、企业版和教育版以及 Windows Server 2012 及以上版本中可用。<br>1、打开记事本输入以下命令。</p><p>``</p><p>pushd “%~dp0”</p><p>dir /b %SystemRoot%\servicing\Packages*Hyper-V*.mum &gt;hyper-v.txt</p><p>for /f %%i in (‘findstr /i . hyper-v.txt 2^&gt;nul’) do dism /online /norestart /add-package:”%SystemRoot%\servicing\Packages\%%i”<br>del hyper-v.txt<br>Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</p><p>``<br>2、保存并命名为 Hyper-V.cmd，然后点击文件，右键以管理员身份运行，等待执行完成</p><p>3、输入Y重启计算机，重启完后就可以按Win键在开始菜单下的Windows管理工具查看有没有安装成功，安装成功会有个Hyper-V管理器</p><p>docker 删除不干净问题<br>参考文章：</p><p>解决方法：<br>把 C:/Program Files/Docker 删除后<br><code>按下Window+R唤起命令输入界面，输入regedit打开注册表编辑在地址栏输入HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Docker Desktop将整个Docker Desktop组点击右键删除</code></p><h3 id="方法二-ubuntu-应用商店自带（推荐）【2024-1-5可用】"><a href="#方法二-ubuntu-应用商店自带（推荐）【2024-1-5可用】" class="headerlink" title="方法二 ubuntu 应用商店自带（推荐）【2024.1.5可用】"></a>方法二 ubuntu 应用商店自带（推荐）【2024.1.5可用】</h3><p>1）打开ubuntu<br>设置用户名和密码<br>2）<br><code>https://about.gitlab.com/downloads/#ubuntu1404</code></p><pre><code>sudo apt updatesudo apt-get upgradesudo apt-get install curl openssh-server ca-certificates postfix</code></pre><p>出现的问题：<br>1.Ubuntu错误提示 E: Could not open lock file /var/lib/dpkg/lock-frontend - open<br>解决方案：</p><pre><code>1. sudo rm /var/lib/dpkg/lock-frontend2. sudo rm /var/lib/dpkg/lock3. sudo apt install p7zip-full</code></pre><p>2.找不到gitLabURL<br>解决方案：<br>[windows10 找寻ip地址：192.168.0.129:8077 root密码123456]<br>把/etc/gitlab/gitlab弄坏了<br>一定要输入i！！！！<br>然后</p><h3 id="方法三：windows10改ubuntu搭建gitlab服务器"><a href="#方法三：windows10改ubuntu搭建gitlab服务器" class="headerlink" title="方法三：windows10改ubuntu搭建gitlab服务器"></a>方法三：windows10改ubuntu搭建gitlab服务器</h3><pre><code>准备：1.U盘 32G（作者使用）2.window10系统的电脑</code></pre><p>【把u盘变成装两个系统1.window10 2.ubuntu 的功能盘】<br>1.先分区 用DiskGenius</p><h4 id="1-windows10改ubuntu"><a href="#1-windows10改ubuntu" class="headerlink" title="1.windows10改ubuntu"></a>1.windows10改ubuntu</h4><p>1）Ubuntu系统镜像下载<br><img src="https://cdn.jsdelivr.net/gh/qvp-nvn/image/img/ubuntuzp.jpg" alt="ubuntu首页照片"><br>2.1）制作启动盘软件(UltraISO)下载<br>UltralSO官网：</p><blockquote><p><a href="https://filehippo.com/download_ultra-iso"></a><br>直接下载免费试用版本，全部默认下一步安装。<br>2.2）下载rufus(官网推荐)<br>下载地址（<a href="https://rufus.ie/）或">https://rufus.ie/）或</a><br>下载地址(<a href="https://www.jb51.net/softs/86993.html">https://www.jb51.net/softs/86993.html</a>)<br>【 分区类型：GPT和MBR的区别】<br>MBR<br>MBR的意思是“主引导记录”，是IBM公司早年间提出的。它是存在于磁盘驱动器开始部分的一个特殊的启动扇区。这个扇区包含了已安装的操作系统系统信息，并用一小段代码来启动系统。如果你安装了Windows，其启动信息就放在这一段代码中——如果MBR的信息损坏或误删就不能正常启动Windows，这时候你就需要找一个引导修复软件工具来修复它就可以了。Linux系统中MBR通常会是GRUB加载器。MBR。当一台电脑启动时，它会先启动主板自带的BIOS系统，bios加载MBR，MBR再启动Windows，这就是mbr的启动过程。<br>GPT<br>GPT的意思是GUID Partition Table，即“全局唯一标识磁盘分区表”。他是另外一种更加先进新颖的磁盘组织方式，一种使用UEFI启动的磁盘组织方式。最开始是为了更好的兼容性，后来因为其更大的支持内存（mbr分区最多支持2T的磁盘），更多的兼容而被广泛使用，特别是苹果的MAC系统全部使用gpt分区。gtp不在有分区的概念，所有CDEF盘都在一段信息中存储。<br>这是一个正逐渐取代MBR的新标准，它和UEFI相辅相成——UEFI用于取代老旧的BIOS，而GPT则取代老旧的MBR。之所以叫作”GUID分区表”，是因为你的驱动器上的每个分区都有一个全局唯一的标识符（globally unique identifier，GUID）——这是一个随机生成的字符串，可以保证为地球上的每一个GPT分区都分配完全唯一的标识符；<br>MBR分区和GPT分区的区别<br>因为兼容问题，gpt其实在引导的最开始部分也有一段mbr引导，也叫做“保护引导”，为了防止设备不支持uefi。</p></blockquote><p>mbr最多支持2T，而gpt理论上是无限制的。<br>mbr最多支持四个主分区，gpt没有限制。如果你想跑多系统，mbr最多4个而gpt没有限制。<br>win7只能用mbr分区，从Win8开始微软建议你使用gpt。<br>gpt是由uefi启动的，而uefi是后来才提出的概念，兼容性和稳定性不如bios+mbr。</p><p>原文链接：<a href="https://blog.csdn.net/wjzh2008/article/details/126927841">https://blog.csdn.net/wjzh2008/article/details/126927841</a><br>【文件系统】<br>文件系统，是计算机管理数据的一种目录结构。<br><em>两张对比图片</em><br><img src="https://cdn.jsdelivr.net/gh/qvp-nvn/image/img/%25E6%2596%2587%25E4%25BB%25B6%25E7%25B3%25BB%25E7%25BB%259F%25E5%25AF%25B9%25E6%25AF%25941.png" alt="文件系统对比1"><br><img src="https://cdn.jsdelivr.net/gh/qvp-nvn/image/img/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%942.png" alt="文件系统对比2"></p><p><img src="https://cdn.jsdelivr.net/gh/qvp-nvn/image/img/rufus.jpg" alt="rufus"><br>【建议使用GPT和NTFS】</p><p>单击第二行的“选择”，选择下载好的Ubuntu的iso文件。</p><p>单机“打开”，询问是否下载，选择“是”。</p><p>选择第一个，选择“OK”，再选择确定，稍等一会，启动盘制作完成。</p><p>三、安装Ubuntu<br>重启电脑，从u盘启动，作者从F11进入的</p><p>进入Ubuntu（safe graphics）</p><p>在界面中进入安装程序<br>中文简体-安装Ubuntu-键盘布局建议选English(US)-网络连接-最小安装，其他默认-清除整个磁盘并安装Ubuntu，也可以分区【<a href="https://blog.csdn.net/u012052268/article/details/77145427">分区参考</a>】-设置时区【自行设置】-设置用户名密码-自行设置-进行配置-在对应提示时拔掉u盘启动盘-进入ubuntu系统</p><h4 id="2-ubuntu系统中搭建gitlab"><a href="#2-ubuntu系统中搭建gitlab" class="headerlink" title="2.ubuntu系统中搭建gitlab"></a>2.ubuntu系统中搭建gitlab</h4><pre><code>sudo apt updatesudo apt-get upgradesudo apt-get install curl openssh-server ca-certificates postfix也可以用sudo apt-get install -y curl openssh-server ca-certificates tzdata perlcurl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</code></pre><p>可以用在线和离线两种方式下载gitlab<br>1.在线【推荐】<br>2.离线</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章：&lt;/p&gt;
&lt;h2 id=&quot;Clash-for-windows&quot;&gt;&lt;a href=&quot;#Clash-for-windows&quot; class=&quot;headerlink&quot; title=&quot;Clash for windows&quot;&gt;&lt;/a&gt;Clash for windows&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>window10分区</title>
    <link href="https://amoit.top/posts/2297fd41.html"/>
    <id>https://amoit.top/posts/2297fd41.html</id>
    <published>2024-01-04T19:37:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window10分区"><a href="#window10分区" class="headerlink" title="window10分区"></a>window10分区</h2><p>windows10实现分盘的方法：</p><p>1、首先我们需要进去“磁盘管理”，右击“计算机”—&gt;“管理”—&gt;”磁盘管理”<br>2、进行分盘<br>1)、进入磁盘管理之后，我们可以看到我的分区情况。然后选择你需要进行分盘的磁盘，点击右键，然后选择“压缩卷”，如图示。这个操作比较的简单<br>2)、然后系统会自动的查询压缩空间，计算出可以压缩空间，输入你需要压缩空间，然后点击：压缩。<br>3)、压缩完成后，会看到一个未分配的分区。然后选中该空白分区，点击右键，选择“新建简单卷”。<br>4)、进入新建简单卷向导，我们这里直接点击“下一步”就好了<br>5)、然后我们指定卷的大小，我们可以输入自己想要的大小。然后点击“下一步”。<br>6)、为新建的简单卷，选择盘符。<br>7)、然后为新建的简单卷选择磁盘的格式，一般选择“NTFS”就好了。<br>8)、就可以在我的电脑看到新建的分区了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;window10分区&quot;&gt;&lt;a href=&quot;#window10分区&quot; class=&quot;headerlink&quot; title=&quot;window10分区&quot;&gt;&lt;/a&gt;window10分区&lt;/h2&gt;&lt;p&gt;windows10实现分盘的方法：&lt;/p&gt;
&lt;p&gt;1、首先我们需要进去“磁盘</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PicGo+github图床搭建</title>
    <link href="https://amoit.top/posts/4de81b83.html"/>
    <id>https://amoit.top/posts/4de81b83.html</id>
    <published>2024-01-02T13:06:27.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PicGo-github图床搭建"><a href="#PicGo-github图床搭建" class="headerlink" title="PicGo+github图床搭建"></a>PicGo+github图床搭建</h1><h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><p>本机：MacBook Pro<br>参考文章：<a href="https://blog.csdn.net/hellowujianning/article/details/">https://blog.csdn.net/hellowujianning/article/details/</a></p><p>本机环境：已安装好PicGo。</p><h3 id="使用github搭建图床"><a href="#使用github搭建图床" class="headerlink" title="使用github搭建图床"></a>使用github搭建图床</h3><h4 id="1-首先确保自己有个github账号，没有的自己去申请一个，过程自己网上搜索；"><a href="#1-首先确保自己有个github账号，没有的自己去申请一个，过程自己网上搜索；" class="headerlink" title="1.首先确保自己有个github账号，没有的自己去申请一个，过程自己网上搜索；"></a>1.首先确保自己有个github账号，没有的自己去申请一个，过程自己网上搜索；</h4><h4 id="2-在github上创建一个仓库；"><a href="#2-在github上创建一个仓库；" class="headerlink" title="2.在github上创建一个仓库；"></a>2.在github上创建一个仓库；</h4><h4 id="图床是什么"><a href="#图床是什么" class="headerlink" title="图床是什么"></a>图床是什么</h4><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p><h3 id="3-创建一个私人token；"><a href="#3-创建一个私人token；" class="headerlink" title="3.创建一个私人token；"></a>3.创建一个私人token；</h3><p>在GitHub中按照以下顺序创建一个token：Settings -&gt; Developer settings 。<br>选择Personal access tokens，输入Note，选择永不过期，把repo的勾打上即可。<br>然后翻到页面最底部，点击Generate token的绿色按钮生成token。</p><h3 id="使用PicGo"><a href="#使用PicGo" class="headerlink" title="使用PicGo"></a>使用PicGo</h3><p>一个用于快速上传图片并获取图片 URL 链接的工具。<br>1.下载PicGo；</p><p>通过github下载PicGo，根据相应系统选择对应格式。<br><code>https://github.com/Molunerfinn/PicGo/releases</code><br>2.配置PicGo中的github图床；<br>3.测试github图床。</p><h3 id="使用CDN加速"><a href="#使用CDN加速" class="headerlink" title="使用CDN加速"></a>使用CDN加速</h3><p>CDN的全称是Content Delivery Network，即内容分发网络。其目的是通过在现有的internet中增加一层新的网络架构，将网站的内容发布到最接近用户的网络边缘，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。</p><p>在这里，我们选择了快速免费公有的CDN-jsdelivr</p><p>配置方法：</p><p>只需要在我们 PicGo 图床配置中添加如下自定义域名即可<br><code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p><p>引申：</p><h3 id="在Typora中配置PicGo"><a href="#在Typora中配置PicGo" class="headerlink" title="在Typora中配置PicGo"></a>在Typora中配置PicGo</h3><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PicGo-github图床搭建&quot;&gt;&lt;a href=&quot;#PicGo-github图床搭建&quot; class=&quot;headerlink&quot; title=&quot;PicGo+github图床搭建&quot;&gt;&lt;/a&gt;PicGo+github图床搭建&lt;/h1&gt;&lt;h2 id=&quot;操作环境&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Github回滚代码</title>
    <link href="https://amoit.top/posts/2297fd4d.html"/>
    <id>https://amoit.top/posts/2297fd4d.html</id>
    <published>2023-03-08T19:37:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<p>1、查看commit hash值<br>git log<br>或者<br>git reflog<br>1<br>2<br>3</p><p>我的项目也就是到达上述红框最新的版本时，异常报错了，所以要回到上一个版本。</p><p>2、执行git reset —hard xxxx回滚命令</p><h1 id="回滚到上一个版本"><a href="#回滚到上一个版本" class="headerlink" title="回滚到上一个版本"></a>回滚到上一个版本</h1><p>git reset —hard 4ad24e8<br>1<br>2<br>其中xxxx就是每一个版本前面的commit hash值。</p><p>此时，本地的仓库已经成功回滚到上一个版本。</p><p>3、执行远程回滚命令git push -f<br>注意：第二步只是回滚了本地的代码，也就是自己的workspace的代码。GitHub上的仓库中的代码还没有回滚。</p><h1 id="强制提交到github远程仓库"><a href="#强制提交到github远程仓库" class="headerlink" title="强制提交到github远程仓库"></a>强制提交到github远程仓库</h1><p>git push -f<br>1<br>2</p><h1 id="再次查看历史版本"><a href="#再次查看历史版本" class="headerlink" title="再次查看历史版本"></a>再次查看历史版本</h1><p>git reflog</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、查看commit hash值&lt;br&gt;git log&lt;br&gt;或者&lt;br&gt;git reflog&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;/p&gt;
&lt;p&gt;我的项目也就是到达上述红框最新的版本时，异常报错了，所以要回到上一个版本。&lt;/p&gt;
&lt;p&gt;2、执行git reset —hard xx</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Matplotlib输出中文显示问题 (mac)</title>
    <link href="https://amoit.top/posts/4de81b80.html"/>
    <id>https://amoit.top/posts/4de81b80.html</id>
    <published>2023-03-08T18:16:27.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matplotlib输出中文显示问题-mac"><a href="#Matplotlib输出中文显示问题-mac" class="headerlink" title="Matplotlib输出中文显示问题 (mac)"></a>Matplotlib输出中文显示问题 (mac)</h1><p>声明：这是对别人经验的总结</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>matplotlib绘制图像的时候显示中文时候，中文会变成小方格子。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="方法一：修改配置文件matplotlibrc"><a href="#方法一：修改配置文件matplotlibrc" class="headerlink" title="方法一：修改配置文件matplotlibrc"></a>方法一：修改配置文件matplotlibrc</h3><p>在matplotlib的安装路径：Python36\site-packages\matplotlib\mpl-data\matplotlibrc，文件中有如下内容：</p><pre><code>font.family    : sans-seriffont.sans-serif   : Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Anal, Helvetica, Avant Ga</code></pre><h3 id="方法二：动态设置参数（推荐方式）"><a href="#方法二：动态设置参数（推荐方式）" class="headerlink" title="方法二：动态设置参数（推荐方式）"></a>方法二：动态设置参数（推荐方式）</h3><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><p>在python脚本中动态设置matplotlibrc，这样就避免了更改配置文件的麻烦，方便灵活，例如:</p><p>from pylab import mpl<br>mpl.rcParams[‘font.sans-serif] = [‘SimHei’]</p><p>由于更改了字体导致显示不出负号，将配署文件中axes.unicode minus : True修改为Falsest就可以了，当然这而可以用代码来完成。</p><p>from pylab import mpl</p><p>mpl.rcParams[‘font.sans-serif’] = [‘FangSong’] # 指定默认字体<br>mpl.rcParams[‘axes.unicode_minus’] = False # 解决保存图像是负号’-‘显示为方块的问题</p><h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><p>plt.rcParams[‘font.sans-serif’] = [‘Arial Unicode MS’]<br>方法三：使用字体管理器<br>python有个字体管理器，font_manager</p><p>myfont = matplotlib.font_manager.FontProperties(fname=’C:/Windows/Fonts/msyh.ttf’)<br>mpl.rcParams[‘axes.unicode_minus’] = False  </p><h3 id="字体对应名称"><a href="#字体对应名称" class="headerlink" title="字体对应名称:"></a>字体对应名称:</h3><p>黑体    SimHei<br>微软雅黑    Microsoft YaHei<br>微软正黑体    Microsoft JhengHei<br>新宋体    NSimSun<br>新细明体    PMingLiU<br>细明体    MingLiU<br>标楷体    DFKai-SB<br>仿宋    FangSong<br>楷体    KaiTi<br>仿宋_GB2312    FangSong_GB2312<br>楷体_GB2312    KaiTi_GB2312</p><p>宋体：SimSuncss中中文字体（font-family）的英文名称</p><p>Mac OS的一些：</p><p>华文细黑：STHeiti Light [STXihei]</p><p>华文黑体：STHeiti</p><p>华文楷体：STKaiti</p><p>华文宋体：STSong</p><p>华文仿宋：STFangsong</p><p>儷黑 Pro：LiHei Pro Medium</p><p>儷宋 Pro：LiSong Pro Light</p><p>標楷體：BiauKai</p><p>蘋果儷中黑：Apple LiGothic Medium</p><p>蘋果儷細宋：Apple LiSung Light</p><p>Windows的一些：</p><p>新細明體：PMingLiU</p><p>細明體：MingLiU</p><p>標楷體：DFKai-SB</p><p>黑体：SimHei</p><p>新宋体：NSimSun</p><p>仿宋：FangSong</p><p>楷体：KaiTi</p><p>仿宋_GB2312：FangSong_GB2312</p><p>楷体_GB2312：KaiTi_GB2312</p><p>微軟正黑體：Microsoft JhengHei</p><p>微软雅黑体：Microsoft YaHei</p><p>装Office会生出来的一些：</p><p>隶书：LiSu</p><p>幼圆：YouYuan</p><p>华文细黑：STXihei</p><p>华文楷体：STKaiti</p><p>华文宋体：STSong</p><p>华文中宋：STZhongsong</p><p>华文仿宋：STFangsong</p><p>方正舒体：FZShuTi</p><p>方正姚体：FZYaoti</p><p>华文彩云：STCaiyun</p><p>华文琥珀：STHupo</p><p>华文隶书：STLiti</p><p>华文行楷：STXingkai</p><p>华文新魏：STXinwei</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Matplotlib输出中文显示问题-mac&quot;&gt;&lt;a href=&quot;#Matplotlib输出中文显示问题-mac&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib输出中文显示问题 (mac)&quot;&gt;&lt;/a&gt;Matplotlib输出中文显示问题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>蓝桥杯 python组</title>
    <link href="https://amoit.top/posts/4de81b79.html"/>
    <id>https://amoit.top/posts/4de81b79.html</id>
    <published>2023-03-07T17:57:27.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蓝桥杯-python组"><a href="#蓝桥杯-python组" class="headerlink" title="蓝桥杯 python组"></a>蓝桥杯 python组</h1><h1 id="idle的使用快捷键"><a href="#idle的使用快捷键" class="headerlink" title="idle的使用快捷键"></a>idle的使用快捷键</h1><h1 id="python了解"><a href="#python了解" class="headerlink" title="python了解"></a>python了解</h1><h2 id="os常用方法"><a href="#os常用方法" class="headerlink" title="os常用方法"></a>os常用方法</h2><p>os.remove() 删除文件</p><p>os.rename() 重命名文件</p><p>os.walk() 生成目录树下的所有文件名</p><p>os.chdir() 改变目录</p><p>os.mkdir/makedirs 创建目录/多层目录</p><p>os.rmdir/removedirs 删除目录/多层目录</p><p>os.listdir() 列出指定目录的文件</p><p>os.getcwd() 取得当前工作目录</p><p>os.chmod() 改变目录权限</p><p>os.path.basename() 去掉目录路径，返回文件名</p><p>os.path.dirname() 去掉文件名，返回目录路径</p><p>os.path.join() 将分离的各部分组合成一个路径名</p><p>os.path.split() 返回( dirname(), basename())元组</p><p>os.path.splitext() 返回 (filename, extension) 元组</p><p>os.path.getatime\ctime\mtime 分别返回最近访问、创建、修改时间</p><p>os.path.getsize() 返回文件大小</p><p>os.path.exists() 是否存在</p><p>os.path.isabs() 是否为绝对路径</p><p>os.path.isdir() 是否为目录</p><p>os.path.isfile() 是否为文件 </p><h2 id="sys-常用方法"><a href="#sys-常用方法" class="headerlink" title="sys 常用方法"></a>sys 常用方法</h2><p>sys.argv 命令行参数List，第一个元素是程序本身路径</p><p>sys.modules.keys() 返回所有已经导入的模块列表</p><p>sys.exc_info() 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</p><p>sys.exit(n) 退出程序，正常退出时exit(0)</p><p>sys.hexversion 获取Python解释程序的版本值，16进制格式如：0x020403F0</p><p>sys.version 获取Python解释程序的版本信息</p><p>sys.maxint 最大的Int值</p><p>sys.maxunicode 最大的Unicode值</p><p>sys.modules 返回系统导入的模块字段，key是模块名，value是模块</p><p>sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</p><p>sys.platform 返回操作系统平台名称</p><p>sys.stdout 标准输出</p><p>sys.stdin 标准输入</p><p>sys.stderr 错误输出</p><p>sys.exc_clear() 用来清除当前线程所出现的当前的或最近的错误信息</p><p>sys.exec_prefix 返回平台独立的python文件安装的位置</p><p>sys.byteorder 本地字节规则的指示器，big-endian平台的值是’big’,little-endian平台的值是’little’</p><p>sys.copyright 记录python版权相关的东西</p><p>sys.api_version 解释器的C的API版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;蓝桥杯-python组&quot;&gt;&lt;a href=&quot;#蓝桥杯-python组&quot; class=&quot;headerlink&quot; title=&quot;蓝桥杯 python组&quot;&gt;&lt;/a&gt;蓝桥杯 python组&lt;/h1&gt;&lt;h1 id=&quot;idle的使用快捷键&quot;&gt;&lt;a href=&quot;#idle的使用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo+netilify+twikoo 建立个人博客 （mac）</title>
    <link href="https://amoit.top/posts/4de81b78.html"/>
    <id>https://amoit.top/posts/4de81b78.html</id>
    <published>2023-01-13T17:57:27.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-netilify-twikoo-建立个人博客-（mac）"><a href="#hexo-netilify-twikoo-建立个人博客-（mac）" class="headerlink" title="hexo+netilify+twikoo 建立个人博客 （mac）"></a>hexo+netilify+twikoo 建立个人博客 （mac）</h1><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><pre><code>[小冰大佬的博客](https://zfe.space/)[安知鱼的博客](https://anzhiy.cn/)[爱铺bug的熊博客]( https://blog.cuijiacai.com/)</code></pre><h2 id="其他的资源"><a href="#其他的资源" class="headerlink" title="其他的资源"></a>其他的资源</h2><pre><code>//一些图标[阿里巴巴矢量库](https://www.iconfont.cn)//图片[vilipix](https://www.vilipix.com/)</code></pre><p>注意：一些地方需要到外网来搭建，建议先购买梯子</p><h1 id="使用的工具及系统环境以及花销"><a href="#使用的工具及系统环境以及花销" class="headerlink" title="使用的工具及系统环境以及花销:"></a>使用的工具及系统环境以及花销:</h1><pre><code>花销：19rmb博客框架是hexo，博客文件拖管于github，博客网站用netlify生成，国内访问采用vercel加速以及评论区制作系统环境是macOS，后续的教程都基于macOS的终端及其包管理软件homebrew进行域名是从阿里云购买的，9rmb/年图床使用的安知鱼的图床，懒得搭建了 10r/1Ghttps://image.anzhiy.cn/user/albums</code></pre><h1 id="hexo博客框架"><a href="#hexo博客框架" class="headerlink" title="hexo博客框架"></a>hexo博客框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>hexo是一个基于nodejs的静态博客网站生成器，作者是来自台湾的Tommy Chen<br>使用的one markdown进行日常的写博客，保存到_post文件下<br>（目前还需要新建 hexo n ‘博客主标题’）</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>hexo是一个基于nodejs的静态博客网站生成器，作者是来自台湾的Tommy Chen</p><h3 id="homebrew-安装"><a href="#homebrew-安装" class="headerlink" title="homebrew 安装"></a>homebrew 安装</h3><h3 id="命令安装："><a href="#命令安装：" class="headerlink" title="命令安装："></a>命令安装：</h3><p><code>brew install node # homebrew安装nodejs</code></p><h3 id="确认环境配置信息"><a href="#确认环境配置信息" class="headerlink" title="确认环境配置信息"></a>确认环境配置信息</h3><pre><code>node -v # 查看node版本信息npm -v # 查看npm版本信息</code></pre><h3 id="npm默认的官网源可能会比较慢-需要设置成淘宝镜像"><a href="#npm默认的官网源可能会比较慢-需要设置成淘宝镜像" class="headerlink" title="npm默认的官网源可能会比较慢,需要设置成淘宝镜像"></a>npm默认的官网源可能会比较慢,需要设置成淘宝镜像</h3><pre><code>npm config get registry # 查看原来的源npm config set registry https://registry.npm.taobao.org # 修改为淘宝源npm config get registry # 查看现在的源</code></pre><h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p><code>npm install hexo-cli -g # 全局安装hexo命令行工具</code><br>其中-g参数表示全局安装，没有这个参数就只在当前目录下安装，建议全局安装。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="新建文件夹-“博客名字”"><a href="#新建文件夹-“博客名字”" class="headerlink" title="新建文件夹 “博客名字”"></a>新建文件夹 “博客名字”</h3><p><code>hexo init &quot;你的博客目录名称&quot; # 目录名称不含空格的时候双引号可以省略</code> </p><h3 id="进入博客目录："><a href="#进入博客目录：" class="headerlink" title="进入博客目录："></a>进入博客目录：</h3><p> (1)右键文件夹-&gt;服务-&gt;新建位于文件夹位置的终端窗口<br> (2)终端-&gt;<code>cd &quot;博客目录&quot;</code><br>（安装一些其他的插件: <code>npm install &quot;所要安装的插件名&quot;# 安装的依赖项在package.json文件的dependencies字段中可以看到</code>）</p><h3 id="博客项目目录结构介绍"><a href="#博客项目目录结构介绍" class="headerlink" title="博客项目目录结构介绍"></a>博客项目目录结构介绍</h3><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：<a href="https://hexo.io/zh-cn/docs/configuration.html。">https://hexo.io/zh-cn/docs/configuration.html。</a></p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当hexo生成新博客的时候，会用这里面的模版进行初始化。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>这个文件夹下面存放的是网站的markdown源文件，里面有一个_post文件夹，所有的.md博客文件都会存放在这个文件夹下。现在，你应该能看到里面有一个hello-world.md文件。</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>网站主题目录，hexo有非常丰富的主题支持，主题目录会存放在这个目录下面。<br>我们后续会以默认主题来演示，更多的主题参见：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="生成新文章"><a href="#生成新文章" class="headerlink" title="生成新文章"></a>生成新文章</h2><pre><code>hexo new post &quot;test&quot; # 会在 source/_posts/ 目录下生成文件 ‘test.md’，打开编辑hexo generate        # 生成静态HTML文件到 /public 文件夹中hexo server          # 本地运行server服务预览，打开 http://localhost:4000 即可预览你的博客</code></pre><p>快捷设置：<br>package.json中增加<br>“dev”: “hexo clean &amp;&amp; hexo g &amp;&amp; hexo s”</p><h3 id="主题以及hexo命令"><a href="#主题以及hexo命令" class="headerlink" title="主题以及hexo命令"></a>主题以及hexo命令</h3><p>更多的主题可以从官网下载。<br>更详细的hexo命令可以查看文档：<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p><h3 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h3><p>```# Site<br>title: Hexo  # 网站标题<br>subtitle:    # 网站副标题<br>description: # 网站描述<br>author: John Doe  # 作者<br>language:    # 语言<br>timezone:    # 网站时区, Hexo默认使用您电脑的时区</p><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h2 id="If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child‘"><a href="#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child‘" class="headerlink" title="If your site is put in a subdirectory, set url as ‘http://yoursite.com/child‘"></a>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child">http://yoursite.com/child</a>‘</h2><h2 id="and-root-as-‘-child-‘"><a href="#and-root-as-‘-child-‘" class="headerlink" title="and root as ‘/child/‘"></a>and root as ‘/child/‘</h2><p>url: <a href="http://yoursite.com">http://yoursite.com</a>   # 你的站点Url<br>root: /                    # 站点的根目录<br>permalink: :year/:month/:day/:title/   # 文章的 永久链接 格式<br>permalink_defaults:        # 永久链接中各部分的默认值</p><h1 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h1><p>source_dir: source     # 资源文件夹，这个文件夹用来存放内容<br>public_dir: public     # 公共文件夹，这个文件夹用于存放生成的站点文件。<br>tag_dir: tags          # 标签文件夹<br>archive_dir: archives  # 归档文件夹<br>category_dir: categories     # 分类文件夹<br>code_dir: downloads/code     # Include code 文件夹<br>i18n_dir: :lang              # 国际化（i18n）文件夹<br>skip_render:                 # 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。    </p><h1 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h1><p>new_post_name: :title.md  # 新文章的文件名称<br>default_layout: post      # 预设布局<br>titlecase: false          # 把标题转换为 title case<br>external_link: true       # 在新标签中打开链接<br>filename_case: 0          # 把文件名称转换为 (1) 小写或 (2) 大写<br>render_drafts: false      # 是否显示草稿<br>post_asset_folder: false  # 是否启动 Asset 文件夹<br>relative_link: false      # 把链接改为与根目录的相对位址<br>future: true              # 显示未来的文章<br>highlight:                # 内容中代码块的设置<br>  enable: true            # 开启代码块高亮<br>  line_number: true       # 显示行数<br>  auto_detect: false      # 如果未指定语言，则启用自动检测<br>  tab_replace:            # 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</p><h1 id="Category-amp-Tag"><a href="#Category-amp-Tag" class="headerlink" title="Category &amp; Tag"></a>Category &amp; Tag</h1><p>default_category: uncategorized<br>category_map:       # 分类别名<br>tag_map:            # 标签别名</p><h1 id="Date-Time-format"><a href="#Date-Time-format" class="headerlink" title="Date / Time format"></a>Date / Time format</h1><h2 id="Hexo-uses-Moment-js-to-parse-and-display-date"><a href="#Hexo-uses-Moment-js-to-parse-and-display-date" class="headerlink" title="Hexo uses Moment.js to parse and display date"></a>Hexo uses Moment.js to parse and display date</h2><h2 id="You-can-customize-the-date-format-as-defined-in"><a href="#You-can-customize-the-date-format-as-defined-in" class="headerlink" title="You can customize the date format as defined in"></a>You can customize the date format as defined in</h2><h2 id="http-momentjs-com-docs-displaying-format"><a href="#http-momentjs-com-docs-displaying-format" class="headerlink" title="http://momentjs.com/docs/#/displaying/format/"></a><a href="http://momentjs.com/docs/#/displaying/format/">http://momentjs.com/docs/#/displaying/format/</a></h2><p>date_format: YYYY-MM-DD     # 日期格式<br>time_format: HH:mm:ss       # 时间格式    </p><h1 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h1><h2 id="Set-per-page-to-0-to-disable-pagination"><a href="#Set-per-page-to-0-to-disable-pagination" class="headerlink" title="Set per_page to 0 to disable pagination"></a>Set per_page to 0 to disable pagination</h2><p>per_page: 10           # 分页数量<br>pagination_dir: page   # 分页目录</p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><h2 id="Plugins-https-hexo-io-plugins"><a href="#Plugins-https-hexo-io-plugins" class="headerlink" title="Plugins: https://hexo.io/plugins/"></a>Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></h2><h2 id="Themes-https-hexo-io-themes"><a href="#Themes-https-hexo-io-themes" class="headerlink" title="Themes: https://hexo.io/themes/"></a>Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></h2><p>theme: landscape   # 主题名称</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><h1 id="部署部分的设置"><a href="#部署部分的设置" class="headerlink" title="部署部分的设置"></a>部署部分的设置</h1><p>deploy:<br>  type: ‘’ # 类型，常用的git </p><pre><code># Github项目文件托管## 小白须知：这一步需要进入外网，需要梯子，加速器等## git 是在本地进行安装的## 创建本地仓库，然后推送到远端服务器：</code></pre><p>cd “博客目录”<br>git init<br>git add .<br>git commit -m “提交信息”<br>git remote add origin “远端github仓库地址”<br>git branch -M main<br>git push -u origin main<br>```</p><h1 id="ClouldFlare加速-or-vercel加速"><a href="#ClouldFlare加速-or-vercel加速" class="headerlink" title="ClouldFlare加速 or vercel加速"></a>ClouldFlare加速 or vercel加速</h1><h1 id="twikoo评论系统"><a href="#twikoo评论系统" class="headerlink" title="twikoo评论系统"></a>twikoo评论系统</h1><h1 id="一些出现的错误"><a href="#一些出现的错误" class="headerlink" title="一些出现的错误"></a>一些出现的错误</h1><h2 id="Nelify-部署异常"><a href="#Nelify-部署异常" class="headerlink" title="Nelify 部署异常"></a>Nelify 部署异常</h2><h2 id="添加github贡献图"><a href="#添加github贡献图" class="headerlink" title="添加github贡献图"></a>添加github贡献图</h2><h2 id="评论区错误"><a href="#评论区错误" class="headerlink" title="评论区错误"></a>评论区错误</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo-netilify-twikoo-建立个人博客-（mac）&quot;&gt;&lt;a href=&quot;#hexo-netilify-twikoo-建立个人博客-（mac）&quot; class=&quot;headerlink&quot; title=&quot;hexo+netilify+twikoo 建立个人博</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://amoit.top/posts/2297fd4f.html"/>
    <id>https://amoit.top/posts/2297fd4f.html</id>
    <published>2023-01-10T19:37:01.000Z</published>
    <updated>2024-04-07T14:49:52.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="test666"><a href="#test666" class="headerlink" title="test666"></a>test666</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;test666&quot;&gt;&lt;a href=&quot;#test666&quot; class=&quot;headerlink&quot; title=&quot;test666&quot;&gt;&lt;/a&gt;test666&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
